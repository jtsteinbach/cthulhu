// Cthulhu SIEM Rules - JRL (Jaco Ruling Language) Guide
// https://jts.gg/cthulhu/jrl
//
// Below is a labeled breakdown of every event type and exactly which fields you can use
// when writing rules.  If a field does not exist for a given event, any criterion testing that field simply fails.
//
// ──────────────────────────────────────────────────────────────────────────────────────────────
//
// Supported operators:
//
//   ==           equals (numeric or string)  
//   !=           not equals  
//   >, >=, <, <= greater/less than or equal  
//   contains     substring match (case-sensitive)  
//   icontains    substring match (case-insensitive)  
//   startswith   string prefix  
//   endswith     string suffix  
//   matches      regular-expression match  
//   in, not_in   membership in a JSON array (e.g. [ "val1", "val2" ])  
//   bitwise_and or &   bitwise-AND nonzero (numeric)  
//   between, not_between   numeric or timestamp between [min, max] inclusive; use a JSON array, e.g. [10, 20]  
//   cidr_contains or in_cidr  IP in CIDR, e.g. “192.168.0.5” in “192.168.0.0/24”  
//   before, after        compare RFC3339 timestamps (e.g. "2025-06-03T12:00:00Z")  
//   
// ──────────────────────────────────────────────────────────────────────────────────────────────
//
//  Exec Events (exec)
//
//    When a process launch is detected (journald._CMDLINE or auditd.syscall == "execve"):
//
//    A) Journald-Derived Exec
//       • journald._CMDLINE   – full command line string
//       • journald._EXE       – path to the executable
//       • journald._PID       – process ID (as string)
//       • journald._UID       – user ID (as string)
//       • journald.MESSAGE    – raw log message (if any)
//
//    B) Auditd-Derived Exec
//       • auditd.syscall     – always "execve"
//       • auditd.exe         – path to executable
//       • auditd.pid         – process ID (as string)
//       • auditd.uid         – user ID (as string)
//       • auditd.auid        – audit user ID (as string)
//       • auditd.ppid        – parent process ID (as string)
//       • auditd.cwd         – current working directory (as string)
//       • auditd.success     – "yes" or "no" (as string)
//       • auditd.key         – audit key, if set (as string)
//
// ──────────────────────────────────────────────────────────────────────────────────────────────
//
//  Inbound_conn Events (inbound_conn)
//
//    When a new incoming connection is seen:
//
//    A) Journald-Derived Inbound_conn
//       • journald.SRC_IP     – source IP address (as string)
//       • journald.SRC_PORT   – source port (as string; may be missing if not provided)
//       • journald._PID       – PID of the process handling acceptance
//       • journald._UID       – UID of that process
//       • journald.MESSAGE    – raw log message (if any)
//
//    B) Auditd-Derived Inbound_conn
//       • auditd.syscall     – always "accept"
//       • auditd.pid         – process ID (as string)
//       • auditd.uid         – user ID (as string)
//       • auditd.auid        – audit user ID (as string)
//       • auditd.saddr       – socket address (IP:port) of the accepting socket
//       • auditd.success     – "yes" or "no" (as string)
//
// ──────────────────────────────────────────────────────────────────────────────────────────────
//
//  Outbound_conn Events (outbound_conn)
//
//    When a new outgoing connection is detected:
//
//    A) Journald-Derived Outbound_conn
//       • journald.DST_IP     – destination IP address (as string)
//       • journald.DST_PORT   – destination port (as string)
//       • journald._PID       – PID of the process making the connection
//       • journald._UID       – UID of that process
//       • journald.MESSAGE    – raw log message (if any)
//
//    B) Auditd-Derived Outbound_conn
//       • auditd.syscall     – always "connect"
//       • auditd.pid         – process ID (as string)
//       • auditd.uid         – user ID (as string)
//       • auditd.auid        – audit user ID (as string)
//       • auditd.saddr       – socket address (IP:port) being connected
//       • auditd.success     – "yes" or "no" (as string)
//
// ──────────────────────────────────────────────────────────────────────────────────────────────
//
//  Port_listen Events (port_listen)
//
//    When a process begins listening on a port:
//
//    A) Journald-Derived Port_listen
//       • journald.LISTEN_PID   – PID that called listen() (as string)
//       • journald.LISTEN_FDS   – number of file descriptors listening (as string)
//       • journald._EXE         – executable path (if provided)
//       • journald._PID         – PID of listening process (duplicate of LISTEN_PID if present)
//       • journald._UID         – UID of that process
//       • journald.MESSAGE      – raw log message (if any)
//
//    B) Auditd-Derived Port_listen
//       • auditd.syscall       – always "listen"
//       • auditd.pid           – process ID (as string)
//       • auditd.uid           – user ID (as string)
//       • auditd.auid          – audit user ID (as string)
//       • auditd.saddr         – socket address (IP:port) being listened on
//       • auditd.success       – "yes" or "no" (as string)
//
// ──────────────────────────────────────────────────────────────────────────────────────────────
//
//  Program_start Events (program_start)
//
//    When a program starts but there is no full command line (journald._EXE present, no _CMDLINE),
//    or any auditd entry that has an exe but isn’t one of the mapped syscalls above:
//
//    A) Journald-Derived Program_start
//       • journald._EXE       – executable path
//       • journald._PID       – PID of the started process
//       • journald._UID       – UID of that process
//       • journald.MESSAGE    – raw log message (if any)
//
//    B) Auditd-Derived Program_start
//       • auditd.syscall     – any syscall name that is not execve/connect/accept/listen
//       • auditd.exe         – executable path  
//       • auditd.pid         – process ID (as string)  
//       • auditd.uid         – user ID (as string)  
//       • auditd.auid        – audit user ID (as string)  
//       • auditd.ppid        – parent PID (as string)  
//       • auditd.cwd         – current working directory (as string)  
//       • auditd.path        – file path argument to the syscall (if any)  
//       • auditd.success     – "yes" or "no" (as string)  
//       • auditd.key         – audit key, if set (as string)  
//       • auditd.msg         – raw audit message (if any)  
//
// ──────────────────────────────────────────────────────────────────────────────────────────────
//
//  Login Events (login)
//
//    When journald logs “session opened”:
//
//    • journald._USER_NAME       – username logging in (as string)  
//    • journald._PID             – PID of the login process  
//    • journald._UID             – UID of the logging-in user  
//    • journald.MESSAGE          – raw log message (contains “session opened”)  
//    • journald.__REALTIME_TIMESTAMP – microsecond timestamp (as string)  
//
// ──────────────────────────────────────────────────────────────────────────────────────────────
//
//  Logout Events (logout)
//
//    When journald logs “session closed”:
//
//    • journald._USER_NAME       – username logging out (as string)  
//    • journald._PID             – PID of the logout process  
//    • journald._UID             – UID of the logging-out user  
//    • journald.MESSAGE          – raw log message (contains “session closed”)  
//    • journald.__REALTIME_TIMESTAMP – microsecond timestamp (as string)  
//
// ──────────────────────────────────────────────────────────────────────────────────────────────
//
//  Other Events (other)
//
//    Any event that does not match the above categories. You can still test any of the
//    following—all fields will simply exist only if that event provided them.
//
//    A) Possible journald.* fields (if present in the JSON):  
//       • journald._CMDLINE, journald._EXE, journald._PID, journald._UID  
//       • journald.MESSAGE  
//       • journald.SRC_IP, journald.SRC_PORT, journald.DST_IP, journald.DST_PORT  
//       • journald.LISTEN_PID, journald.LISTEN_FDS  
//       • journald.__REALTIME_TIMESTAMP, journald.__CURSOR, journald._USER_NAME  
//
//    B) Possible auditd.* fields (if present in the parsed audit record):  
//       • auditd.syscall, auditd.pid, auditd.uid, auditd.auid  
//       • auditd.exe, auditd.ppid, auditd.cwd, auditd.path, auditd.success, auditd.key, auditd.msg, auditd.saddr  
//
//    C) Fallback: any other raw JSON key appears in event.extra["<key_name>"]
//
// ──────────────────────────────────────────────────────────────────────────────────────────────
//
// In practice, pick the event_type you know will include the fields you need.
// If you test a field that isn’t present for that event, the rule won’t match.
//
// Example_Rule(event_type)
//     | "Human readable description of alert, and username is admin"
//     : field operator value
//     : ournald._USER_NAME == "admin"


ssh_activity(inbound_conn)
    | "Alert when an external host attempts SSH port activity"
    : journald.SRC_IP != "69.62.69.22"
    ; journald.SRC_PORT == "22"
    :

c2_check(outbound_conn)
    | "Alert when outbound connection occures from a binary outside /usr/bin or /bin"
    : journald._EXE matches "^(?!/usr/bin/|/bin/)"

sudo_usage(exec)
    | "Alert whenever sudo is used"
    : journald._CMDLINE contains "sudo"
    : journald._UID != "0"

root_exec_outside(exec)
    | "Alert when root executes a binary outside /usr/bin or /bin"
    : journald._UID == "0"
    : journald._EXE !startswith "/usr/bin/"
    : journald._EXE !startswith "/bin/"

systemd_enable(exec)
    | "Alert when systemd enables or starts a service"
    : journald._CMDLINE matches "systemctl (enable|start) "

audit_file_open(other)
    | "Alert when any file is opened via auditd"
    : auditd.syscall == "open"
    : auditd.success == "yes"

hosts_file_change(other)
    | "Alert when /etc/hosts is opened for writing"
    : auditd.syscall == "open"
    : auditd.path == "/etc/hosts"
    : auditd.success == "yes"

passwd_file_change(other)
    | "Alert when /etc/passwd is opened for writing"
    : auditd.syscall == "open"
    : auditd.path == "/etc/passwd"
    : auditd.success == "yes"

shadow_chmod(exec)
    | "Alert when chmod is used on /etc/shadow"
    : journald._CMDLINE matches "chmod .*/etc/shadow"

invalid_login(login)
    | "Alert when a session opens for a missing or disabled user"
    : journald._USER_NAME missing

root_ssh_login(login)
    | "Alert when root logs in over SSH"
    : journald.MESSAGE contains "sshd"
    : journald._UID == "0"

sudo_fail(exec)
    | "Alert when sudo execve fails in auditd"
    : auditd.syscall == "execve"
    : auditd.exe == "/usr/bin/sudo"
    : auditd.success == "no"

setuid_exec(exec)
    | "Alert when a setuid binary runs by a nonroot user"
    : journald._UID != "0"
    : journald._EXE exists
    : (journald._EXE startswith "/usr/bin/" or journald._EXE startswith "/bin/")
    : journald._EXE matches ".*/(passwd|chown|chgrp|chmod)$"

cron_modified(other)
    | "Alert when a cron.d file is created or modified"
    : auditd.syscall == "open"
    : auditd.path matches "/etc/cron\\..*/.*"
    : auditd.success == "yes"

sshd_restart(program_start)
    | "Alert when sshd service process starts"
    : journald._EXE == "/usr/sbin/sshd"
    : journald._CMDLINE contains "-D"

docker_daemon_start(program_start)
    | "Alert when dockerd process starts"
    : journald._EXE == "/usr/bin/dockerd"

user_add(exec)
    | "Alert when adduser or useradd is executed"
    : auditd.syscall == "execve"
    : auditd.exe matches "/usr/sbin/(adduser|useradd)"

authlog_delete(other)
    | "Alert when /var/log/auth.log is unlinked"
    : auditd.syscall == "unlink"
    : auditd.path == "/var/log/auth.log"
    : auditd.success == "yes"

reverse_shell(exec)
    | "Alert when bash makes an outbound connection to high port"
    : journald._EXE == "/usr/bin/bash"
    : journald.DST_PORT >= 1024
    : journald.SRC_IP exists

download_nonroot(exec)
    | "Alert when curl or wget runs under nonroot outside /root"
    : journald._UID != "0"
    : journald._CMDLINE matches "(curl|wget) .+"
    : journald._CMDLINE !contains "/root/"

unusual_outbound(outbound_conn)
    | "Alert when outbound connection uses nonstandard ports"
    : journald.DST_PORT != "80"
    : journald.DST_PORT != "443"
    : journald.DST_PORT != "22"
    : journald.DST_PORT != "53"

port_scan(inbound_conn)
    | "Alert when any host attempts many inbound connections in 1 minute"
    : journald.SRC_IP exists
    : journald.SRC_IP != "127.0.0.1"
    : journald.SRC_IP != "::1"
    : journald.__REALTIME_TIMESTAMP within "1m"

pkg_manager_root(exec)
    | "Alert when pip or apt is run under root"
    : journald._UID == "0"
    : (journald._CMDLINE startswith "pip " or journald._CMDLINE startswith "apt ")

sshd_config_change(other)
    | "Alert when sshd_config is opened for writing"
    : auditd.syscall == "open"
    : auditd.path == "/etc/ssh/sshd_config"
    : auditd.success == "yes"

systemd_unit_edit(other)
    | "Alert when a systemd service file is modified"
    : auditd.syscall == "open"
    : auditd.path matches "/etc/systemd/system/.*\\.service"
    : auditd.success == "yes"

su_nonroot(exec)
    | "Alert when su is attempted by nonroot"
    : journald._CMDLINE startswith "su "
    : journald._UID != "0"

ssh_keys_access(other)
    | "Alert when authorized_keys or known_hosts opened by nonroot"
    : auditd.syscall == "open"
    : (auditd.path matches "/home/.*/\\.ssh/authorized_keys" or auditd.path matches "/home/.*/\\.ssh/known_hosts")
    : auditd.success == "yes"
    : auditd.uid != "0"

user_delete(exec)
    | "Alert when userdel or deluser is executed"
    : auditd.syscall == "execve"
    : auditd.exe matches "/usr/sbin/(userdel|deluser)"

iptables_modify(exec)
    | "Alert when iptables or nft commands run"
    : journald._CMDLINE matches "(iptables|nft) .+"

high_port_listen(port_listen)
    | "Alert when any process listens on ports >=10000"
    : journald.LISTEN_FDS >= 1
    : journald.DST_PORT >= 10000

cron_job_run(exec)
    | "Alert when cron daemon executes a nonstandard script"
    : journald._CMDLINE matches "/usr/bin/cron"
    : journald._CMDLINE !contains "/etc/cron."

sudoers_write(other)
    | "Alert when /etc/sudoers is opened for writing"
    : auditd.syscall == "open"
    : auditd.path == "/etc/sudoers"
    : auditd.success == "yes"
